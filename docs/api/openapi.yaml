openapi: 3.0.3
info:
  title: Radium AI Deployment Platform API
  description: |
    The Radium AI Deployment Platform provides a comprehensive REST API for managing AI model deployments, fine-tuning, analytics, and billing.
    
    ## Authentication
    All API requests require authentication using API keys. Include your API key in the Authorization header:
    ```
    Authorization: Bearer sk-your-api-key
    ```
    
    ## Rate Limiting
    API requests are rate limited based on your account tier:
    - **Tier 1**: 1,000 requests/minute
    - **Tier 2**: 5,000 requests/minute
    - **Tier 3**: 10,000 requests/minute
    - **Enterprise**: Custom limits
  version: 1.0.0
  contact:
    name: API Support
    email: support@radiumchat.com
    url: https://docs.radiumchat.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.radiumchat.com/v1
    description: Production server
  - url: http://localhost:3000/api/deploy
    description: Development server

paths:
  /deployments:
    get:
      summary: List deployments
      description: Retrieve a list of all deployments for the authenticated user
      tags:
        - Deployments
      parameters:
        - name: status
          in: query
          description: Filter by deployment status
          schema:
            type: string
            enum: [pending, deploying, active, failed, stopped]
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of deployments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deployment'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create deployment
      description: Create a new model deployment
      tags:
        - Deployments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
      responses:
        '201':
          description: Deployment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Deployment'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Model not found
        '500':
          $ref: '#/components/responses/ServerError'

  /deployments/{id}:
    get:
      summary: Get deployment details
      description: Retrieve detailed information about a specific deployment
      tags:
        - Deployments
      parameters:
        - name: id
          in: path
          required: true
          description: Deployment ID
          schema:
            type: string
      responses:
        '200':
          description: Deployment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DeploymentDetails'
        '404':
          description: Deployment not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: Update deployment
      description: Update deployment configuration
      tags:
        - Deployments
      parameters:
        - name: id
          in: path
          required: true
          description: Deployment ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeploymentRequest'
      responses:
        '200':
          description: Deployment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Deployment'
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Deployment not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete deployment
      description: Delete a deployment and free up resources
      tags:
        - Deployments
      parameters:
        - name: id
          in: path
          required: true
          description: Deployment ID
          schema:
            type: string
      responses:
        '200':
          description: Deployment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Deployment not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /models:
    get:
      summary: List available models
      description: Retrieve a list of all available models in the catalog
      tags:
        - Models
      parameters:
        - name: category
          in: query
          description: Filter by model category
          schema:
            type: string
        - name: provider
          in: query
          description: Filter by model provider
          schema:
            type: string
        - name: featured
          in: query
          description: Show only featured models
          schema:
            type: boolean
        - name: search
          in: query
          description: Search models by name or description
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of models
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model'
                  filters:
                    type: object
                    properties:
                      categories:
                        type: array
                        items:
                          type: string
                      providers:
                        type: array
                        items:
                          type: string
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /models/{id}:
    get:
      summary: Get model details
      description: Retrieve detailed information about a specific model
      tags:
        - Models
      parameters:
        - name: id
          in: path
          required: true
          description: Model ID
          schema:
            type: string
      responses:
        '200':
          description: Model details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ModelDetails'
        '404':
          description: Model not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api-keys:
    get:
      summary: List API keys
      description: Retrieve a list of all API keys for the authenticated user
      tags:
        - API Keys
      parameters:
        - name: status
          in: query
          description: Filter by API key status
          schema:
            type: string
            enum: [active, revoked]
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiKey'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create API key
      description: Create a new API key
      tags:
        - API Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: Descriptive name for the API key
                  example: "Production API Key"
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ApiKeyWithSecret'
                  message:
                    type: string
                  warning:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /analytics:
    get:
      summary: Get usage analytics
      description: Retrieve usage analytics and metrics
      tags:
        - Analytics
      parameters:
        - name: timeframe
          in: query
          description: Time frame for analytics
          schema:
            type: string
            enum: [1h, 24h, 7d, 30d]
            default: 24h
        - name: metric
          in: query
          description: Specific metric to focus on
          schema:
            type: string
            enum: [requests, tokens, latency, cost]
            default: requests
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Analytics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Deployment:
      type: object
      properties:
        id:
          type: string
          description: Unique deployment identifier
        name:
          type: string
          description: Deployment name
        modelId:
          type: string
          description: ID of the deployed model
        status:
          type: string
          enum: [pending, deploying, active, failed, stopped]
          description: Current deployment status
        endpointUrl:
          type: string
          nullable: true
          description: API endpoint URL for the deployment
        configuration:
          type: object
          description: Deployment configuration settings
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        lastActiveAt:
          type: string
          format: date-time
          nullable: true
          description: Last activity timestamp
        totalRequests:
          type: integer
          description: Total number of requests processed
        totalCost:
          type: string
          description: Total cost in USD
        model:
          type: object
          properties:
            name:
              type: string
            provider:
              type: string
            category:
              type: string

    DeploymentDetails:
      allOf:
        - $ref: '#/components/schemas/Deployment'
        - type: object
          properties:
            logs:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  level:
                    type: string
                  message:
                    type: string
            metrics:
              type: object
              properties:
                last24Hours:
                  type: object
                  properties:
                    requests:
                      type: integer
                    errors:
                      type: integer
                    avgLatency:
                      type: integer
                    totalCost:
                      type: string

    CreateDeploymentRequest:
      type: object
      required:
        - modelId
        - name
      properties:
        modelId:
          type: string
          description: ID of the model to deploy
        name:
          type: string
          description: Name for the deployment
        configuration:
          type: object
          description: Optional deployment configuration
          properties:
            acceleratorType:
              type: string
              description: GPU type (H100, A100, etc.)
            acceleratorCount:
              type: integer
              description: Number of GPUs
            autoScaling:
              type: boolean
              description: Enable auto-scaling
            minReplicas:
              type: integer
              description: Minimum number of replicas
            maxReplicas:
              type: integer
              description: Maximum number of replicas

    UpdateDeploymentRequest:
      type: object
      properties:
        configuration:
          type: object
          description: Updated deployment configuration
        status:
          type: string
          enum: [active, stopped]
          description: Desired deployment status

    Model:
      type: object
      properties:
        id:
          type: string
          description: Unique model identifier
        name:
          type: string
          description: Model name
        provider:
          type: string
          description: Model provider (DeepSeek, Meta, etc.)
        category:
          type: string
          description: Model category
        description:
          type: string
          description: Model description
        inputPrice:
          type: string
          description: Price per 1M input tokens
        outputPrice:
          type: string
          description: Price per 1M output tokens
        contextLength:
          type: string
          description: Maximum context length
        capabilities:
          type: array
          items:
            type: string
          description: Model capabilities
        performance:
          type: object
          properties:
            latency:
              type: string
            throughput:
              type: string
        gpuRequirements:
          type: object
          properties:
            type:
              type: string
            vram:
              type: string
            count:
              type: integer
        featured:
          type: boolean
          description: Whether the model is featured
        active:
          type: boolean
          description: Whether the model is available

    ModelDetails:
      allOf:
        - $ref: '#/components/schemas/Model'
        - type: object
          properties:
            benchmarks:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  score:
                    type: string
                  description:
                    type: string
            examples:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                  prompt:
                    type: string
                  response:
                    type: string

    ApiKey:
      type: object
      properties:
        id:
          type: string
          description: Unique API key identifier
        name:
          type: string
          description: API key name
        keyMasked:
          type: string
          description: Masked API key (only prefix and suffix visible)
        status:
          type: string
          enum: [active, revoked]
          description: API key status
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        lastUsedAt:
          type: string
          format: date-time
          nullable: true
          description: Last usage timestamp
        totalUsage:
          type: integer
          description: Total number of requests made with this key

    ApiKeyWithSecret:
      allOf:
        - $ref: '#/components/schemas/ApiKey'
        - type: object
          properties:
            keyFull:
              type: string
              description: Full API key (only shown once during creation)

    Analytics:
      type: object
      properties:
        summary:
          type: object
          properties:
            totalRequests:
              type: string
            successRequests:
              type: string
            errorRequests:
              type: string
            errorRate:
              type: string
            totalTokens:
              type: string
            totalCost:
              type: string
            avgLatency:
              type: string
        chartData:
          type: array
          items:
            type: object
            properties:
              time:
                type: string
              timestamp:
                type: string
                format: date-time
              requests:
                type: integer
              errors:
                type: integer
              tokens:
                type: integer
              cost:
                type: number
              avgLatency:
                type: integer
        topModels:
          type: array
          items:
            type: object
            properties:
              modelId:
                type: string
              modelName:
                type: string
              requests:
                type: string
              tokens:
                type: string
              cost:
                type: string

    Pagination:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        limit:
          type: integer
          description: Maximum items per page
        offset:
          type: integer
          description: Number of items skipped
        hasMore:
          type: boolean
          description: Whether there are more items available

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key
      description: |
        API key authentication. Include your API key in the Authorization header:
        ```
        Authorization: Bearer sk-your-api-key
        ```

security:
  - ApiKeyAuth: []

tags:
  - name: Deployments
    description: Manage model deployments
  - name: Models
    description: Browse available models
  - name: API Keys
    description: Manage API keys
  - name: Analytics
    description: Usage analytics and metrics
  - name: Fine-tuning
    description: Fine-tune models with custom data
  - name: Datasets
    description: Manage training datasets
  - name: Billing
    description: Billing and payment management